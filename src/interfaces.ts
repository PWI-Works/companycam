// Auto-generated by CompanyCam SDK generator. Do not edit manually.

// Schemas

/**
 * Representation of the company.
 */
export interface Company {
  id: string;
  name: string;
  status?: "active" | "cancelled" | "deleted";
  address?: Address;
  logo?: Array<ImageURI>;
}

/**
 * Representation of the user.
 */
export interface User {
  id: string;
  company_id?: string;
  email_address?: string;
  status?: "active" | "deleted";
  first_name?: string;
  last_name?: string;
  profile_image?: Array<ImageURI>;
  phone_number?: string | null;
  created_at?: number;
  updated_at?: number;
  user_url?: string;
}

/**
 * Representation of the project.
 */
export interface Project {
  id: string;
  company_id?: string;
  creator_id?: string;
  creator_type?: string;
  creator_name?: string;
  status?: "active" | "deleted";
  archived?: boolean;
  name?: string | null;
  address?: Address;
  coordinates?: Coordinate;
  featured_image?: Array<ImageURI>;
  project_url?: string;
  embedded_project_url?: string;
  integrations?: Array<ProjectIntegration>;
  slug?: string;
  public?: boolean;
  geofence?: Array<Coordinate>;
  primary_contact?: ProjectContactResponse;
  notepad?: string;
  created_at?: number;
  updated_at?: number;
}

/**
 * Representation of the photo.
 */
export interface Photo {
  id: string;
  company_id?: string;
  creator_id?: string;
  creator_type?: string;
  creator_name?: string;
  project_id?: string;
  processing_status?:
    | "pending"
    | "processing"
    | "processed"
    | "processing_error"
    | "duplicate";
  coordinates?: Array<Coordinate>;
  uris?: Array<ImageURI>;
  hash?: string;
  description?: string;
  internal?: boolean;
  photo_url?: string;
  captured_at?: number;
  created_at?: number;
  updated_at?: number;
}

/**
 * Representation of the tag.
 */
export interface Tag {
  id: string;
  company_id?: string;
  display_value?: string;
  value?: string;
  created_at?: number;
  updated_at?: number;
}

/**
 * Representation of the group.
 */
export interface Group {
  id: string;
  company_id?: string;
  name?: string;
  users?: Array<User>;
  status?: "active" | "deleted";
  group_url?: string;
  created_at?: number;
  updated_at?: number;
}

/**
 * Representation of the webhook.
 */
export interface Webhook {
  id: string;
  company_id?: string;
  url?: string;
  scopes?: Array<string>;
  token?: string;
  enabled?: boolean;
  created_at?: number;
  updated_at?: number;
}

/**
 * Representation of the image uri.
 */
export interface ImageURI {
  type: string;
  uri: string;
  url?: string;
}

/**
 * Representation of the address.
 */
export interface Address {
  street_address_1?: string | null;
  street_address_2?: string | null;
  city?: string | null;
  state?: string | null;
  postal_code?: string | null;
  country?: string | null;
}

/**
 * Standard pagination parameters used across list endpoints.
 */
export interface PaginationQueryParams {
  page?: number;
  per_page?: number;
}

/**
 * Optional header for impersonating a specific CompanyCam user when performing requests.
 */
export interface UserContextHeaderParams {
  /**
   * Email of CompanyCam user to be designated as the actor for the request.
   */
  "X-CompanyCam-User"?: string;
}

/**
 * Representation of the checklist.
 */
export interface Checklist {
  id?: string;
  company_id?: string;
  project_id?: string;
  name?: string;
  created_at?: number;
  updated_at?: number;
  completed_at?: number | null;
  creator_id?: string;
  checklist_template_id?: string | null;
  is_populating?: boolean;
  sectionless_tasks?: Array<Task>;
  sections?: Array<ChecklistSection>;
}

/**
 * Representation of the checklist section.
 */
export interface ChecklistSection {
  id?: string;
  todo_list_id?: string;
  creator_id?: string;
  creator_type?: string;
  creator_name?: string;
  title?: string;
  position?: number;
  tasks?: Array<Task>;
}

/**
 * Representation of the task.
 */
export interface Task {
  id?: string;
  completed_at?: number;
  completed_by_id?: string;
  completed_by_type?: string;
  created_at?: number;
  creator_id?: string;
  creator_type?: string;
  details?: string;
  photo_capture_required?: boolean;
  position?: number;
  todo_list_id?: string;
  todo_list_section_id?: string | null;
  title?: string;
  updated_at?: number;
  sub_tasks?: Array<SubTask>;
  photos?: Array<Photo>;
}

/**
 * Representation of the sub task.
 */
export interface SubTask {
  id?: string;
  label?: string;
  answer_type?: "open_text" | "multiple_choice" | "yes_no";
  answer_choices?: Array<unknown>;
  answer_options?: Array<string>;
  position?: number;
  task_id?: string;
  answer_text?: string;
}

/**
 * Representation of the checklist template.
 */
export interface ChecklistTemplate {
  id?: string;
  company_id?: string;
  name?: string;
  description?: string;
  created_at?: number;
  updated_at?: number;
}

/**
 * Representation of the coordinate.
 */
export interface Coordinate {
  lat: number;
  lon: number;
}

/**
 * Representation of the project integration.
 */
export interface ProjectIntegration {
  type: string;
  relation_id: string;
}

/**
 * Representation of the comment.
 */
export interface Comment {
  id: string;
  creator_id?: string;
  creator_type?: string;
  creator_name?: string;
  commentable_id?: string;
  commentable_type?: string;
  status?: string;
  content?: string;
  created_at?: number;
  updated_at?: number;
}

/**
 * Representation of the document.
 */
export interface Document {
  id: string;
  creator_id?: string;
  creator_type?: string;
  creator_name?: string;
  project_id?: string;
  name?: string;
  url?: string;
  content_type?: string;
  byte_size?: number;
  created_at?: number;
  updated_at?: number;
}

/**
 * Representation of the project contact response.
 */
export interface ProjectContactResponse {
  id?: string;
  project_id?: string;
  name?: string;
  email?: string;
  phone_number?: string;
  created_at?: number;
  updated_at?: number;
}

/**
 * Representation of the error.
 */
export interface Error {
  errors?: Array<string>;
}

/**
 * Representation of the project contact request.
 */
export interface ProjectContactRequest {
  name: string;
  email?: string;
  phone_number?: string;
}

/**
 * Representation of the project notepad.
 */
export interface ProjectNotepad {
  notepad: string;
}

/**
 * Representation of the project collaborator.
 */
export interface ProjectCollaborator {
  id?: string;
  company_id?: string;
  project_id?: string;
  project_invitation_id?: string;
  accepted_at?: number;
  created_at?: number;
  updated_at?: number;
}

/**
 * Representation of the project invitation.
 */
export interface ProjectInvitation {
  id?: string;
  project_id?: string;
  invite_url?: string;
  status?: "accepted" | "expired" | "pending";
  accepted_at?: number;
  accepted_by_id?: string;
  expires_at?: number;
  creator_id?: string;
  created_at?: number;
  updated_at?: number;
}

// Operations

/**
 * Query parameters accepted by the list checklists q operation.
 */
export interface ListChecklistsQueryParams extends PaginationQueryParams {
  completed?: boolean;
}

/**
 * Request body payload for the create user operation.
 */
export interface CreateUserRequestBody {
  user?: {
    first_name?: string;
    last_name?: string;
    email_address?: string;
    phone_number?: string;
    password?: string;
    user_role?: string;
  };
}

/**
 * Request body payload for the update user operation.
 */
export interface UpdateUserRequestBody {
  first_name?: string;
  last_name?: string;
  email_address?: string;
  phone_number?: string;
  password?: string;
}

/**
 * Query parameters accepted by the list projects q operation.
 */
export interface ListProjectsQueryParams extends PaginationQueryParams {
  query?: string;
  modified_since?: string;
}

/**
 * Request body payload for the create project operation.
 */
export interface CreateProjectRequestBody {
  name?: string;
  address?: Address;
  coordinates?: Coordinate;
  geofence?: Array<Coordinate>;
  primary_contact?: ProjectContactRequest;
}

/**
 * Request body payload for the update project operation.
 */
export interface UpdateProjectRequestBody {
  name?: string;
  address?: Address;
  coordinates?: Coordinate;
  geofence?: Array<Coordinate>;
}

/**
 * Query parameters accepted by the list project photos q operation.
 */
export interface ListProjectPhotosQueryParams extends PaginationQueryParams {
  start_date?: string;
  end_date?: string;
  user_ids?: Array<number>;
  group_ids?: Array<number>;
  tag_ids?: Array<number>;
}

/**
 * Request body payload for the create project photo operation.
 */
export interface CreateProjectPhotoRequestBody {
  photo: {
    coordinates?: Coordinate;
    uri: string;
    captured_at: number;
    description?: string;
    tags?: Array<string>;
  };
}

/**
 * Request body payload for the update project notepad operation.
 */
export interface UpdateProjectNotepadRequestBody {
  notepad: string;
}

/**
 * Request body payload for the create project labels operation.
 */
export interface CreateProjectLabelsRequestBody {
  project?: {
    labels?: Array<string>;
  };
}

/**
 * Request body payload for the create project document operation.
 */
export interface CreateProjectDocumentRequestBody {
  document?: {
    name?: string;
    attachment?: string;
  };
}

/**
 * Request body payload for the create project comment operation.
 */
export interface CreateProjectCommentRequestBody {
  comment?: {
    content?: string;
  };
}

/**
 * Request body payload for the create project checklist operation.
 */
export interface CreateProjectChecklistRequestBody {
  checklist_template_id?: string;
}

/**
 * Query parameters accepted by the list photos q operation.
 */
export interface ListPhotosQueryParams extends PaginationQueryParams {
  start_date?: string;
  end_date?: string;
  user_ids?: Array<number>;
  group_ids?: Array<number>;
  tag_ids?: Array<number>;
}

/**
 * Request body payload for the update photo operation.
 */
export interface UpdatePhotoRequestBody {
  photo?: {
    internal?: boolean;
  };
}

/**
 * Request body payload for the create photo tags operation.
 */
export interface CreatePhotoTagsRequestBody {
  tags?: Array<string>;
}

/**
 * Request body payload for the create photo comment operation.
 */
export interface CreatePhotoCommentRequestBody {
  comment?: {
    content?: string;
  };
}

/**
 * Request body payload for the update photo description operation.
 */
export interface UpdatePhotoDescriptionRequestBody {
  description?: string;
}

/**
 * Request body payload for the create tag operation.
 */
export interface CreateTagRequestBody {
  tag?: {
    display_value?: string;
  };
}

/**
 * Request body payload for the update tag operation.
 */
export interface UpdateTagRequestBody {
  tag?: {
    display_value?: string;
  };
}

/**
 * Request body payload for the create group operation.
 */
export interface CreateGroupRequestBody {
  group?: {
    name?: string;
    users?: Array<string>;
  };
}

/**
 * Request body payload for the update group operation.
 */
export interface UpdateGroupRequestBody {
  group?: {
    name?: string;
    users?: Array<string>;
  };
}

/**
 * Request body payload for the create webhook operation.
 */
export interface CreateWebhookRequestBody {
  url?: string;
  scopes?: Array<string>;
  enabled?: boolean;
  token?: string;
}

/**
 * Request body payload for the update webhook operation.
 */
export interface UpdateWebhookRequestBody {
  url?: string;
  scopes?: Array<string>;
  enabled?: boolean;
  token?: string;
}
